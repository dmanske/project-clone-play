// Script para testar a solu√ß√£o final de pagina√ß√£o
// Execute com: node test-solucao-final.js

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://uroukakmvanyeqxicuzw.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVyb3VrYWttdmFueWVxeGljdXp3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY4MzMzOTYsImV4cCI6MjA2MjQwOTM5Nn0.fFRtqvpf7kwbJyAh5JHYjTU2zbEI9BvAjDp2rXikrO8';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Simular a fun√ß√£o fetchClientes atualizada
async function fetchClientesComPaginacao() {
  try {
    console.log('üîÑ Simulando fetchClientes com pagina√ß√£o...');
    
    // Usar pagina√ß√£o para contornar o limite de 1000 registros do Supabase
    let todosClientes = [];
    let offset = 0;
    const pageSize = 1000;
    let hasMore = true;
    
    while (hasMore) {
      console.log(`   üìÑ Carregando p√°gina ${Math.floor(offset / pageSize) + 1}...`);
      
      const { data, error } = await supabase
        .from("clientes")
        .select("id, nome, telefone, email, cidade")
        .order("nome")
        .range(offset, offset + pageSize - 1);
      
      if (error) throw error;
      
      if (!data || data.length === 0) {
        hasMore = false;
        console.log('   ‚úÖ Fim dos dados');
      } else {
        todosClientes.push(...data);
        console.log(`   ‚úÖ ${data.length} registros carregados (total: ${todosClientes.length})`);
        
        if (data.length < pageSize) {
          hasMore = false;
          console.log('   ‚úÖ √öltima p√°gina carregada');
        } else {
          offset += pageSize;
        }
      }
    }
    
    console.log(`\n‚úÖ Clientes carregados com pagina√ß√£o: ${todosClientes.length} total`);
    return todosClientes;
  } catch (error) {
    console.error('‚ùå Erro ao buscar clientes:', error);
    return [];
  }
}

async function testSolucaoFinal() {
  console.log('üéØ Testando solu√ß√£o final...');
  
  try {
    // 1. Contar total real
    console.log('\nüìä Contando total de clientes...');
    const { count: totalClientes } = await supabase
      .from('clientes')
      .select('*', { count: 'exact', head: true });
    
    console.log(`   Total na base: ${totalClientes}`);
    
    // 2. Testar a nova fun√ß√£o
    const clientesCarregados = await fetchClientesComPaginacao();
    
    // 3. Verificar se todos foram carregados
    console.log('\nüîç Verifica√ß√£o final:');
    
    if (clientesCarregados.length === totalClientes) {
      console.log('   ‚úÖ SUCESSO: Todos os clientes foram carregados!');
      console.log(`   üìä ${clientesCarregados.length}/${totalClientes} clientes`);
    } else {
      console.log('   ‚ùå PROBLEMA: Ainda h√° clientes faltando');
      console.log(`   üìä ${clientesCarregados.length}/${totalClientes} clientes`);
      console.log(`   üìâ Faltam: ${(totalClientes || 0) - clientesCarregados.length} clientes`);
    }
    
    // 4. Testar busca por nome
    console.log('\nüîç Testando busca por nome "Maria"...');
    const searchTerm = "Maria";
    const filtered = clientesCarregados.filter(cliente =>
      cliente.nome.toLowerCase().includes(searchTerm.toLowerCase()) ||
      cliente.telefone.includes(searchTerm) ||
      cliente.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
      cliente.cidade.toLowerCase().includes(searchTerm.toLowerCase())
    );
    
    console.log(`   ‚úÖ Clientes encontrados com "${searchTerm}": ${filtered.length}`);
    
    if (filtered.length > 0) {
      console.log('   üìã Primeiros 3 resultados:');
      filtered.slice(0, 3).forEach((cliente, index) => {
        console.log(`      ${index + 1}. ${cliente.nome} - ${cliente.telefone}`);
      });
    }
    
    // 5. Verificar performance
    console.log('\n‚ö° An√°lise de performance:');
    const tempoInicio = Date.now();
    await fetchClientesComPaginacao();
    const tempoFim = Date.now();
    const tempoTotal = tempoFim - tempoInicio;
    
    console.log(`   ‚è±Ô∏è  Tempo de carregamento: ${tempoTotal}ms`);
    
    if (tempoTotal < 5000) {
      console.log('   ‚úÖ Performance aceit√°vel (< 5s)');
    } else {
      console.log('   ‚ö†Ô∏è  Performance pode ser melhorada (> 5s)');
    }
    
    console.log('\nüéâ TESTE CONCLU√çDO!');
    console.log('   A solu√ß√£o de pagina√ß√£o resolve o problema de limita√ß√£o do Supabase.');
    console.log('   Todos os clientes agora podem ser encontrados na busca.');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

testSolucaoFinal();