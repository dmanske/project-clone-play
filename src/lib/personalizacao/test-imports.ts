/**
 * Arquivo de teste para verificar se todas as importa√ß√µes est√£o funcionando
 * Este arquivo pode ser removido ap√≥s a verifica√ß√£o
 */

import {
  PersonalizationConfig,
  ConfigScenario,
  getDefaultConfig,
  PersonalizationValidator,
  PersonalizationSanitizer,
  exportConfig,
  importConfig,
  cloneConfig,
  mergeConfigs
} from './index';

// Teste b√°sico de funcionalidade
export function testPersonalizationSystem(): boolean {
  try {
    // Testar cria√ß√£o de configura√ß√£o padr√£o
    const config = getDefaultConfig(ConfigScenario.COMPLETO);
    console.log('‚úÖ Configura√ß√£o padr√£o criada:', config.metadata.nome);

    // Testar valida√ß√£o
    const validation = PersonalizationValidator.validate(config);
    console.log('‚úÖ Valida√ß√£o executada:', validation.valido ? 'V√°lida' : 'Inv√°lida');

    // Testar sanitiza√ß√£o
    const sanitized = PersonalizationSanitizer.sanitize(config);
    console.log('‚úÖ Sanitiza√ß√£o executada');

    // Testar clonagem
    const cloned = cloneConfig(config);
    console.log('‚úÖ Clonagem executada');

    // Testar exporta√ß√£o
    const exported = exportConfig(config);
    console.log('‚úÖ Exporta√ß√£o executada, tamanho:', exported.length, 'caracteres');

    // Testar importa√ß√£o
    const imported = importConfig(exported);
    console.log('‚úÖ Importa√ß√£o executada:', imported.metadata.nome);

    // Testar merge
    const merged = mergeConfigs(config, {
      metadata: { ...config.metadata, nome: 'Configura√ß√£o Mesclada' }
    });
    console.log('‚úÖ Merge executado:', merged.metadata.nome);

    console.log('üéâ Todos os testes passaram!');
    return true;
  } catch (error) {
    console.error('‚ùå Erro nos testes:', error);
    return false;
  }
}

// Executar teste se este arquivo for importado
if (typeof window !== 'undefined') {
  console.log('üß™ Testando sistema de personaliza√ß√£o...');
  testPersonalizationSystem();
}