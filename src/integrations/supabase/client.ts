
// This file is automatically generated. Do not edit it directly.
import { supabase } from '@/lib/supabase';

// Check if storage buckets exist and create them if missing
// Note that this is just a helper for debugging and local development
const initStorage = async () => {
  try {
    // Check and create onibus bucket
    const { error: onibusError } = await supabase.storage.getBucket('onibus');
    if (onibusError && onibusError.message.includes('not found')) {
      console.log('Creating onibus storage bucket...');
      await supabase.storage.createBucket('onibus', {
        public: true,
        fileSizeLimit: 10485760, // 10MB
      });
      console.log('Onibus bucket created successfully');
    }
    
    // Check and create logos bucket
    const { error: logosError } = await supabase.storage.getBucket('logos');
    if (logosError && logosError.message.includes('not found')) {
      console.log('Creating logos storage bucket...');
      await supabase.storage.createBucket('logos', {
        public: true,
        fileSizeLimit: 5242880, // 5MB
      });
      console.log('Logos bucket created successfully');
    }
    
    // Check and create client-photos bucket
    const { error: clientPhotosError } = await supabase.storage.getBucket('client-photos');
    if (clientPhotosError && clientPhotosError.message.includes('not found')) {
      console.log('Creating client-photos storage bucket...');
      await supabase.storage.createBucket('client-photos', {
        public: true,
        fileSizeLimit: 5242880, // 5MB
      });
      console.log('Client-photos bucket created successfully');
    }

    // Additional error handling for debug purposes
    if (onibusError && !onibusError.message.includes('not found')) {
      console.error('Error checking onibus bucket:', onibusError);
    }
    if (logosError && !logosError.message.includes('not found')) {
      console.error('Error checking logos bucket:', logosError);
    }
    if (clientPhotosError && !clientPhotosError.message.includes('not found')) {
      console.error('Error accessing client-photos bucket:', clientPhotosError);
    }
  } catch (error) {
    console.error('Error initializing storage buckets:', error);
  }
};

// Initialize storage buckets when in browser environment
if (typeof window !== 'undefined') {
  initStorage().catch(err => {
    console.error('Failed to initialize storage buckets:', err);
  });
}

export { supabase };
